var searchIndex = JSON.parse('{\
"pitches":{"doc":"This crate provides types and traits for dealing with …","i":[[0,"midi","pitches","MIDI (chromatic / enharmonic / 12-tone) intervals and …",null,null],[3,"MidiInterval","pitches::midi","MIDI intervals.",null,null],[5,"midi","","Creates a midi interval from an integer.",null,[[["i32",15]],["midiinterval",3]]],[11,"new","","Creates a midi interval from an integer.",0,[[["i32",15]],["midiinterval",3]]],[3,"MidiIC","","MIDI interval classes.",null,null],[5,"midic","","Creates a midi interval class from an integer, wrapping …",null,[[["i32",15]],["midiic",3]]],[11,"new","","Creates a midi interval class from an integer, wrapping …",1,[[["i32",15]],["midiic",3]]],[6,"MidiPitch","","MIDI pitches.",null,null],[6,"MidiPC","","MIDI pitch classes.",null,null],[5,"midip","","Creates a MIDI pitch from an integer.",null,[[["i32",15]],["midipitch",6]]],[5,"midipc","","Creates a MIDI pitch class from an integer, wrapping …",null,[[["i32",15]],["midipc",6]]],[0,"spelled","pitches","Spelled (diatonic) intervals and pitches (as used in …",null,null],[8,"Spelled","pitches::spelled","Common properties of spelled intervals and pitches.",null,null],[10,"fifths","","The position of the interval/pitch on the line of fifths. …",2,[[],["i32",15]]],[10,"octaves","","The number of (directed) octaves the interval spends in …",2,[[],["i32",15]]],[10,"internal_octaves","","The \\\"internal\\\" octaves of an interval, i.e. the ones used …",2,[[],["i32",15]]],[10,"degree","","The scale degree the interval represents. Same as <code>generic</code>…",2,[[],["i32",15]]],[10,"generic","","The generic size of the interval within one octave (up or …",2,[[],["i32",15]]],[10,"diasteps","","The generic size of the interval in diatonic steps. For …",2,[[],["i32",15]]],[10,"alteration","","The chromatic deviation of the interval from its perfect …",2,[[],["i32",15]]],[3,"SpelledInterval","","Spelled intervals.",null,null],[5,"spelled","","Create a spelled interval from (upward) fifths and …",null,[[["i32",15]],["spelledinterval",3]]],[11,"new","","Construct an interval from a combination of (upward) …",3,[[["i32",15]],["spelledinterval",3]]],[11,"dia_chrom","","Construct an interval from a combination of diatonic and …",3,[[["i32",15]],["spelledinterval",3]]],[18,"WHOLETONE","","A diatonic wholetone (major second).",3,null],[3,"SpelledIC","","Spelled interval classes.",null,null],[5,"sic","","Create a spelled interval class from fifths.",null,[[["i32",15]],["spelledic",3]]],[11,"new","","Construct a spelled interval from perfect fifths. E.g. …",4,[[["i32",15]],["spelledic",3]]],[6,"SpelledPitch","","Spelled pitches (using [<code>Pitch</code>]).",null,null],[6,"SpelledPC","","Spelled pitch classes (using [<code>Pitch</code>]).",null,null],[5,"spelledp","","Create a spelled pitch from (upward) fifths and (upward) …",null,[[["i32",15]],["spelledpitch",6]]],[5,"spc","","Create a spelled pitch class from fifths above <code>C</code>.",null,[[["i32",15]],["spelledpc",6]]],[8,"Interval","pitches","The trait that all interval types must implement.",null,null],[16,"IC","","The interval class type associated with this interval …",5,null],[18,"OCTAVE","","The interval that represents the octave (upward).",5,null],[18,"UNISON","","The interval that represents the unison.",5,null],[10,"ic","","Turns an interval into the corresponding interval class.",5,[[]]],[10,"direction","","Returns the direction of the interval (up, down, or …",5,[[],["ordering",4]]],[11,"abs","","Returns the absolute interval as an upward interval, …",5,[[]]],[11,"to_pitch","","Turns an interval into the corresponding pitch. The exact …",5,[[],["pitch",3]]],[8,"IntervalClass","","A trait for intervals with octave equivalence (i.e. …",null,null],[16,"I","","The associate \\\"non-class\\\" interval type.",6,null],[10,"emb","","Returns a \\\"non-class\\\" version of the interval in the …",6,[[]]],[8,"Diatonic","","A trait for intervals that can distinguish between steps …",null,null],[10,"is_step","","Returns <code>true</code>, iff the interval is considered to be within …",7,[[],["bool",15]]],[8,"Chromatic","","A trait for intervals that have a chromatic semitone.",null,null],[18,"CHROMATIC_SEMITONE","","The chromatic semitone (i.e. augmented unison) upward.",8,null],[3,"Pitch","","A generic type for pitches (based on a corresponding …",null,null],[11,"new","","Creates a pitch from an interval. The interpretation of …",9,[[]]],[11,"to_interval","","Extracts the wrapped interval. The relation between pitch …",9,[[]]],[11,"pc","","Turns a pitch into a pitch class.",9,[[],["pitch",3]]],[11,"interval_from","","Returns the (directed) interval between <code>other</code> and <code>self</code>.",9,[[]]],[11,"interval_to","","Returns the (directed) interval between <code>self</code> and <code>other</code>.",9,[[]]],[11,"map","","Maps a function over the wrapped interval. This can be …",9,[[["fnonce",8]],[["interval",8],["pitch",3]]]],[11,"emb","","embeds a pitch class in the canonical octave above the …",9,[[],["pitch",3]]],[11,"from","pitches::midi","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"to_string","","",1,[[],["string",3]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","pitches::spelled","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","pitches","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"to_string","","",9,[[],["string",3]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"fifths","pitches::spelled","",3,[[],["i32",15]]],[11,"octaves","","",3,[[],["i32",15]]],[11,"internal_octaves","","",3,[[],["i32",15]]],[11,"diasteps","","",3,[[],["i32",15]]],[11,"generic","","",3,[[],["i32",15]]],[11,"degree","","",3,[[],["i32",15]]],[11,"alteration","","",3,[[],["i32",15]]],[11,"fifths","","",4,[[],["i32",15]]],[11,"octaves","","",4,[[],["i32",15]]],[11,"internal_octaves","","",4,[[],["i32",15]]],[11,"degree","","",4,[[],["i32",15]]],[11,"generic","","",4,[[],["i32",15]]],[11,"diasteps","","",4,[[],["i32",15]]],[11,"alteration","","",4,[[],["i32",15]]],[11,"fifths","pitches","",9,[[],["i32",15]]],[11,"octaves","","",9,[[],["i32",15]]],[11,"internal_octaves","","",9,[[],["i32",15]]],[11,"degree","","",9,[[],["i32",15]]],[11,"generic","","",9,[[],["i32",15]]],[11,"diasteps","","",9,[[],["i32",15]]],[11,"alteration","","",9,[[],["i32",15]]],[11,"ic","pitches::midi","",0,[[],["midiic",3]]],[11,"direction","","",0,[[],["ordering",4]]],[11,"ic","","",1,[[],["midiic",3]]],[11,"direction","","",1,[[],["ordering",4]]],[11,"ic","pitches::spelled","",3,[[],["spelledic",3]]],[11,"direction","","",3,[[],["ordering",4]]],[11,"ic","","",4,[[],["spelledic",3]]],[11,"direction","","",4,[[],["ordering",4]]],[11,"emb","pitches::midi","",1,[[],["midiinterval",3]]],[11,"emb","pitches::spelled","",4,[[],["spelledinterval",3]]],[11,"is_step","pitches::midi","",0,[[],["bool",15]]],[11,"is_step","","",1,[[],["bool",15]]],[11,"is_step","pitches::spelled","",3,[[],["bool",15]]],[11,"is_step","","",4,[[],["bool",15]]],[11,"from","pitches::midi","",0,[[["i32",15]],["midiinterval",3]]],[11,"from","","",1,[[["i32",15]],["midiic",3]]],[11,"from","pitches","",10,[[["i32",15]],["midipitch",6]]],[11,"from","","",11,[[["i32",15]],["midipc",6]]],[11,"clone","pitches::midi","",0,[[],["midiinterval",3]]],[11,"clone","","",1,[[],["midiic",3]]],[11,"clone","pitches::spelled","",3,[[],["spelledinterval",3]]],[11,"clone","","",4,[[],["spelledic",3]]],[11,"clone","pitches","",9,[[],["pitch",3]]],[11,"cmp","pitches::midi","",0,[[["midiinterval",3]],["ordering",4]]],[11,"cmp","","",1,[[["midiic",3]],["ordering",4]]],[11,"cmp","pitches::spelled","",3,[[],["ordering",4]]],[11,"cmp","","",4,[[["spelledic",3]],["ordering",4]]],[11,"cmp","pitches","",9,[[["pitch",3]],["ordering",4]]],[11,"eq","pitches::midi","",0,[[["midiinterval",3]],["bool",15]]],[11,"ne","","",0,[[["midiinterval",3]],["bool",15]]],[11,"eq","","",1,[[["midiic",3]],["bool",15]]],[11,"ne","","",1,[[["midiic",3]],["bool",15]]],[11,"eq","pitches::spelled","",3,[[["spelledinterval",3]],["bool",15]]],[11,"ne","","",3,[[["spelledinterval",3]],["bool",15]]],[11,"eq","","",4,[[["spelledic",3]],["bool",15]]],[11,"ne","","",4,[[["spelledic",3]],["bool",15]]],[11,"eq","pitches","",9,[[["pitch",3]],["bool",15]]],[11,"ne","","",9,[[["pitch",3]],["bool",15]]],[11,"partial_cmp","pitches::midi","",0,[[["midiinterval",3]],[["option",4],["ordering",4]]]],[11,"lt","","",0,[[["midiinterval",3]],["bool",15]]],[11,"le","","",0,[[["midiinterval",3]],["bool",15]]],[11,"gt","","",0,[[["midiinterval",3]],["bool",15]]],[11,"ge","","",0,[[["midiinterval",3]],["bool",15]]],[11,"partial_cmp","","",1,[[["midiic",3]],[["option",4],["ordering",4]]]],[11,"lt","","",1,[[["midiic",3]],["bool",15]]],[11,"le","","",1,[[["midiic",3]],["bool",15]]],[11,"gt","","",1,[[["midiic",3]],["bool",15]]],[11,"ge","","",1,[[["midiic",3]],["bool",15]]],[11,"partial_cmp","pitches::spelled","",3,[[],[["option",4],["ordering",4]]]],[11,"partial_cmp","","",4,[[["spelledic",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["spelledic",3]],["bool",15]]],[11,"le","","",4,[[["spelledic",3]],["bool",15]]],[11,"gt","","",4,[[["spelledic",3]],["bool",15]]],[11,"ge","","",4,[[["spelledic",3]],["bool",15]]],[11,"partial_cmp","pitches","",9,[[["pitch",3]],[["option",4],["ordering",4]]]],[11,"lt","","",9,[[["pitch",3]],["bool",15]]],[11,"le","","",9,[[["pitch",3]],["bool",15]]],[11,"gt","","",9,[[["pitch",3]],["bool",15]]],[11,"ge","","",9,[[["pitch",3]],["bool",15]]],[11,"fmt","pitches::midi","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","pitches::spelled","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","pitches","",9,[[["formatter",3]],["result",6]]],[11,"fmt","pitches::midi","",0,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",1,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","pitches","",10,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",11,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","pitches::spelled","",3,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",4,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","pitches","",12,[[["formatter",3]],[["error",3],["result",4]]]],[11,"fmt","","",13,[[["formatter",3]],[["error",3],["result",4]]]],[11,"sub","pitches::midi","",0,[[["midiinterval",3]],["midiinterval",3]]],[11,"sub","","",1,[[["midiic",3]],["midiic",3]]],[11,"sub","pitches::spelled","",3,[[]]],[11,"sub","","",4,[[]]],[11,"sub","pitches","",9,[[]]],[11,"sub","","",9,[[]]],[11,"add","pitches::midi","",0,[[["midiinterval",3]],["midiinterval",3]]],[11,"add","","",1,[[["midiic",3]],["midiic",3]]],[11,"add","pitches::spelled","",3,[[]]],[11,"add","","",4,[[]]],[11,"add","pitches","",9,[[]]],[11,"mul","pitches::midi","",0,[[["i32",15]],["midiinterval",3]]],[11,"mul","","",1,[[["i32",15]],["midiic",3]]],[11,"mul","pitches::spelled","",3,[[["i32",15]]]],[11,"mul","","",4,[[["i32",15]]]],[11,"neg","pitches::midi","",0,[[],["midiinterval",3]]],[11,"neg","","",1,[[],["midiic",3]]],[11,"neg","pitches::spelled","",3,[[]]],[11,"neg","","",4,[[]]],[11,"from_str","pitches::midi","",0,[[["str",15]],[["result",4],["midiinterval",3]]]],[11,"from_str","","",1,[[["str",15]],[["midiic",3],["result",4]]]],[11,"from_str","pitches","",10,[[["str",15]],[["result",4],["midipitch",6]]]],[11,"from_str","","",11,[[["str",15]],[["midipc",6],["result",4]]]],[11,"from_str","pitches::spelled","",3,[[["str",15]],["result",4]]],[11,"from_str","","",4,[[["str",15]],["result",4]]],[11,"from_str","pitches","",12,[[["str",15]],["result",4]]],[11,"from_str","","",13,[[["str",15]],["result",4]]],[11,"letter","","Returns the letter of the pitch (e.g. <code>\'E\'</code> for <code>Eb</code> or <code>E#4</code>).",9,[[],["char",15]]]],"p":[[3,"MidiInterval"],[3,"MidiIC"],[8,"Spelled"],[3,"SpelledInterval"],[3,"SpelledIC"],[8,"Interval"],[8,"IntervalClass"],[8,"Diatonic"],[8,"Chromatic"],[3,"Pitch"],[6,"MidiPitch"],[6,"MidiPC"],[6,"SpelledPitch"],[6,"SpelledPC"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);