var searchIndex = JSON.parse('{\
"pitches":{"doc":"This crate provides types and traits for dealing with …","t":[18,8,8,16,16,8,8,18,3,18,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,3,3,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,3,6,6,18,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,5,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11],"n":["CHROMATIC_SEMITONE","Chromatic","Diatonic","I","IC","Interval","IntervalClass","OCTAVE","Pitch","UNISON","abs","add","alteration","borrow","borrow_mut","clone","clone_into","cmp","degree","diasteps","direction","emb","emb","eq","fifths","fmt","fmt","fmt","fmt","fmt","from","from","from","from_str","from_str","from_str","from_str","generic","ic","internal_octaves","interval_from","interval_to","into","is_step","letter","map","midi","ne","new","octaves","partial_cmp","pc","spelled","sub","sub","to_interval","to_owned","to_pitch","to_string","try_from","try_into","type_id","MidiIC","MidiInterval","MidiPC","MidiPitch","add","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","direction","direction","emb","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from_str","from_str","ic","ic","into","into","is_step","is_step","midi","midic","midip","midipc","mul","mul","ne","ne","neg","neg","new","new","partial_cmp","partial_cmp","sub","sub","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Spelled","SpelledIC","SpelledInterval","SpelledPC","SpelledPitch","WHOLETONE","add","add","alteration","alteration","alteration","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","degree","degree","degree","dia_chrom","diasteps","diasteps","diasteps","direction","direction","emb","eq","eq","fifths","fifths","fifths","fmt","fmt","fmt","fmt","from","from","from_str","from_str","generic","generic","generic","ic","ic","internal_octaves","internal_octaves","internal_octaves","into","into","is_step","is_step","mul","mul","ne","ne","neg","neg","new","new","octaves","octaves","octaves","partial_cmp","partial_cmp","sic","spc","spelled","spelledp","sub","sub","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["pitches","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pitches::midi","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pitches::spelled","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The chromatic semitone (i.e. augmented unison) upward.","A trait for intervals that have a chromatic semitone.","A trait for intervals that can distinguish between steps …","The associate “non-class” interval type.","The interval class type associated with this interval type.","The trait that all interval types must implement.","A trait for intervals with octave equivalence (i.e. “…","The interval that represents the octave (upward).","A generic type for pitches (based on a corresponding …","The interval that represents the unison.","Returns the absolute interval as an upward interval, …","","","","","","","","","","Returns the direction of the interval (up, down, or …","Returns a “non-class” version of the interval in the …","embeds a pitch class in the canonical octave above the type…","","","","","","","","","","","","","","","","Turns an interval into the corresponding interval class.","","Returns the (directed) interval between <code>other</code> and <code>self</code>.","Returns the (directed) interval between <code>self</code> and <code>other</code>.","","Returns <code>true</code>, iff the interval is considered to be within …","Returns the letter of the pitch (e.g. <code>&#39;E&#39;</code> for <code>Eb</code> or <code>E#4</code>).","Maps a function over the wrapped interval. This can be …","MIDI (chromatic / enharmonic / 12-tone) intervals and …","","Creates a pitch from an interval. The interpretation of …","","","Turns a pitch into a pitch class.","Spelled (diatonic) intervals and pitches (as used in …","","","Extracts the wrapped interval. The relation between pitch …","","Turns an interval into the corresponding pitch. The exact …","","","","","MIDI interval classes.","MIDI intervals.","MIDI pitch classes.","MIDI pitches.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates a midi interval from an integer.","Creates a midi interval class from an integer, wrapping …","Creates a MIDI pitch from an integer.","Creates a MIDI pitch class from an integer, wrapping …","","","","","","","Creates a midi interval from an integer.","Creates a midi interval class from an integer, wrapping …","","","","","","","","","","","","","","","Common properties of spelled intervals and pitches.","Spelled interval classes.","Spelled intervals.","Spelled pitch classes (using <code>Pitch</code>).","Spelled pitches (using <code>Pitch</code>).","A diatonic wholetone (major second).","","","The chromatic deviation of the interval from its perfect …","","","","","","","","","","","","","The scale degree the interval represents. Same as <code>generic</code>, …","","","Construct an interval from a combination of diatonic and …","The generic size of the interval in diatonic steps. For …","","","","","","","","The position of the interval/pitch on the line of fifths. …","","","","","","","","","","","The generic size of the interval within one octave (up or …","","","","","The “internal” octaves of an interval, i.e. the ones …","","","","","","","","","","","","","Construct an interval from a combination of (upward) …","Construct a spelled interval from perfect fifths. E.g. …","The number of (directed) octaves the interval spends in …","","","","","Create a spelled interval class from fifths.","Create a spelled pitch class from fifths above <code>C</code>.","Create a spelled interval from (upward) fifths and …","Create a spelled pitch from (upward) fifths and (upward) …","","","","","","","","","","","",""],"i":[1,0,0,2,3,0,0,3,0,3,3,4,4,4,4,4,4,4,4,4,3,2,4,4,4,5,6,7,8,4,5,6,4,5,6,7,8,4,3,4,4,4,4,9,4,4,0,4,4,4,4,4,0,4,4,4,4,3,4,4,4,4,0,0,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,11,10,11,10,10,11,11,10,10,11,11,10,11,10,11,10,11,10,11,0,0,0,0,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,0,0,0,0,12,12,13,14,12,13,12,13,12,13,12,13,12,13,12,13,14,12,13,12,14,12,13,12,13,13,12,13,14,12,13,12,12,13,13,12,13,12,13,14,12,13,12,13,14,12,13,12,13,12,13,12,13,12,13,12,13,12,13,14,12,13,12,13,0,0,0,0,12,13,12,13,12,13,12,13,12,13,12,13],"f":[null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[],["i32",15]],[[]],[[]],[[],["pitch",3]],[[]],[[["pitch",3]],["ordering",4]],[[],["i32",15]],[[],["i32",15]],[[],["ordering",4]],[[]],[[],["pitch",3]],[[["pitch",3]],["bool",15]],[[],["i32",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["i32",15]],["midipitch",6]],[[["i32",15]],["midipc",6]],[[]],[[["str",15]],[["result",4,["midipitch"]],["midipitch",6]]],[[["str",15]],[["result",4,["midipc"]],["midipc",6]]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["i32",15]],[[]],[[],["i32",15]],[[]],[[]],[[]],[[],["bool",15]],[[],["char",15]],[[["fnonce",8]],[["interval",8],["pitch",3]]],null,[[["pitch",3]],["bool",15]],[[]],[[],["i32",15]],[[["pitch",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["pitch",3]],null,[[]],[[]],[[]],[[]],[[],["pitch",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,[[["midiinterval",3]],["midiinterval",3]],[[["midiic",3]],["midiic",3]],[[]],[[]],[[]],[[]],[[],["midiinterval",3]],[[],["midiic",3]],[[]],[[]],[[["midiinterval",3]],["ordering",4]],[[["midiic",3]],["ordering",4]],[[],["ordering",4]],[[],["ordering",4]],[[],["midiinterval",3]],[[["midiinterval",3]],["bool",15]],[[["midiic",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["i32",15]],["midiinterval",3]],[[]],[[["i32",15]],["midiic",3]],[[]],[[["str",15]],[["result",4,["midiinterval"]],["midiinterval",3]]],[[["str",15]],[["result",4,["midiic"]],["midiic",3]]],[[],["midiic",3]],[[],["midiic",3]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]],["midiinterval",3]],[[["i32",15]],["midiic",3]],[[["i32",15]],["midipitch",6]],[[["i32",15]],["midipc",6]],[[["i32",15]],["midiinterval",3]],[[["i32",15]],["midiic",3]],[[["midiinterval",3]],["bool",15]],[[["midiic",3]],["bool",15]],[[],["midiinterval",3]],[[],["midiic",3]],[[["i32",15]],["midiinterval",3]],[[["i32",15]],["midiic",3]],[[["midiinterval",3]],[["option",4,["ordering"]],["ordering",4]]],[[["midiic",3]],[["option",4,["ordering"]],["ordering",4]]],[[["midiinterval",3]],["midiinterval",3]],[[["midiic",3]],["midiic",3]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[]],[[]],[[],["spelledinterval",3]],[[],["spelledic",3]],[[]],[[]],[[],["ordering",4]],[[["spelledic",3]],["ordering",4]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["i32",15]],["spelledinterval",3]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["ordering",4]],[[],["ordering",4]],[[],["spelledinterval",3]],[[["spelledinterval",3]],["bool",15]],[[["spelledic",3]],["bool",15]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4,["error"]],["error",3]]],[[]],[[]],[[["str",15]],["result",4]],[[["str",15]],["result",4]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],["spelledic",3]],[[],["spelledic",3]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["i32",15]]],[[["i32",15]]],[[["spelledinterval",3]],["bool",15]],[[["spelledic",3]],["bool",15]],[[]],[[]],[[["i32",15]],["spelledinterval",3]],[[["i32",15]],["spelledic",3]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["spelledic",3]],[["option",4,["ordering"]],["ordering",4]]],[[["i32",15]],["spelledic",3]],[[["i32",15]],["spelledpc",6]],[[["i32",15]],["spelledinterval",3]],[[["i32",15]],["spelledpitch",6]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[8,"Chromatic"],[8,"IntervalClass"],[8,"Interval"],[3,"Pitch"],[6,"MidiPitch"],[6,"MidiPC"],[6,"SpelledPitch"],[6,"SpelledPC"],[8,"Diatonic"],[3,"MidiInterval"],[3,"MidiIC"],[3,"SpelledInterval"],[3,"SpelledIC"],[8,"Spelled"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};